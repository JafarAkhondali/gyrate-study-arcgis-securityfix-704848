(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-71e77862"],{"4d47":function(e,t,s){"use strict";s.r(t),s.d(t,"I3STreeDebugger",(function(){return u}));var l=s("a4ee"),i=(s("c120"),s("b2b2")),a=(s("e92d"),s("cea0"),s("59b2")),o=s("d386"),n=(s("e041"),s("8eed"),s("f402"),s("1219")),c=(s("e06a"),s("0b2d")),b=s("e431"),r=s("d791"),h=s("8188"),p=s("afe1"),j=s("5abb");let u=class extends j["a"]{constructor(e){super(e)}getTiles(){const e=this.lv.getVisibleNodes(),t=this.view.renderSpatialReference,s=this.nodeSR;return e.map(e=>d(e,t,s)).sort((e,t)=>e.lij[0]===t.lij[0]?e.label>t.label?-1:1:e.lij[0]-t.lij[0])}};function d(e,t,s){const l=e.serviceObb;if(Object(i["j"])(l)||Object(i["j"])(t))return null;Object(r["q"])(O,l.quaternion),Object(b["l"])(y,l.center),Object(h["q"])(y,s,0,y,t,0,1),O[12]=y[0],O[13]=y[1],O[14]=y[2];const a=[[],[],[]];Object(b["l"])(y,l.halfSize),Object(b["n"])(y,y,O),Object(h["q"])(y,t,0,y,s,0,1),a[0].push([y[0],y[1]]),Object(b["l"])(y,l.halfSize),y[0]=-y[0],Object(b["n"])(y,y,O),Object(h["q"])(y,t,0,y,s,0,1),a[0].push([y[0],y[1]]),Object(b["l"])(y,l.halfSize),y[0]=-y[0],y[1]=-y[1],Object(b["n"])(y,y,O),Object(h["q"])(y,t,0,y,s,0,1),a[0].push([y[0],y[1]]),Object(b["l"])(y,l.halfSize),y[1]=-y[1],Object(b["n"])(y,y,O),Object(h["q"])(y,t,0,y,s,0,1),a[0].push([y[0],y[1]]),a[1].push(a[0][0]),a[1].push(a[0][1]),Object(b["l"])(y,l.halfSize),y[0]=-y[0],y[2]=-y[2],Object(b["n"])(y,y,O),Object(h["q"])(y,t,0,y,s,0,1),a[1].push([y[0],y[1]]),Object(b["l"])(y,l.halfSize),y[2]=-y[2],Object(b["n"])(y,y,O),Object(h["q"])(y,t,0,y,s,0,1),a[1].push([y[0],y[1]]),a[2].push(a[0][0]),a[2].push(a[0][3]),Object(b["l"])(y,l.halfSize),y[1]=-y[1],y[2]=-y[2],Object(b["n"])(y,y,O),Object(h["q"])(y,t,0,y,s,0,1),a[2].push([y[0],y[1]]),a[2].push(a[1][3]);const o=new n["a"]({rings:a,spatialReference:s});return{lij:[e.level,e.childCount,0],label:e.id,geometry:o}}Object(l["a"])([Object(a["b"])({constructOnly:!0})],u.prototype,"lv",void 0),Object(l["a"])([Object(a["b"])({constructOnly:!0})],u.prototype,"nodeSR",void 0),u=Object(l["a"])([Object(o["a"])("esri.views.3d.layers.support.I3STreeDebugger")],u);const O=Object(p["b"])(),y=Object(c["e"])()},"5abb":function(e,t,s){"use strict";s.d(t,"a",(function(){return O}));var l=s("a4ee"),i=(s("c120"),s("b2b2")),a=(s("e92d"),s("cea0"),s("59b2")),o=s("d386"),n=(s("e041"),s("8eed"),s("f402"),s("fc29")),c=s("38a4"),b=s("9ef0"),r=s("a957"),h=s("7533"),p=s("0d76"),j=s("21ba"),u=s("8d60");const d=[[0,179,255],[117,62,128],[0,104,255],[215,189,166],[32,0,193],[98,162,206],[102,112,129],[52,125,0],[142,118,246],[138,83,0],[92,122,255],[122,55,83],[0,142,255],[81,40,179],[0,200,244],[13,24,127],[0,170,147],[19,58,241],[22,44,35]];let O=class extends n["a"]{constructor(e){super(e),this.updating=!1,this.enablePolygons=!0,this.enableLabels=!0,this._polygons=new Map,this._labels=new Map,this._enabled=!0}initialize(){this._symbols=d.map(e=>new p["a"]({color:[e[0],e[1],e[2],.6],outline:{color:"black",width:1}})),this.update()}destroy(){this._enabled=!1,this.clear()}get enabled(){return this._enabled}set enabled(e){this._enabled!==e&&(this._enabled=e,this.update())}update(){if(!this._enabled)return void this.clear();const e=e=>{if(Object(i["k"])(e.label))return e.label;let t=e.lij.toString();return Object(i["k"])(e.loadPriority)&&(t+=` (${e.loadPriority})`),t},t=this.getTiles(),s=new Array,l=new Set((this._labels.size,this._labels.keys()));t.forEach((a,o)=>{const n=a.lij.toString();l.delete(n);const p=a.lij[0],d=a.geometry;if(this.enablePolygons&&!this._polygons.has(n)){const e=new u["a"]({geometry:d,symbol:this._symbols[p%this._symbols.length]});this._polygons.set(n,e),s.push(e)}if(this.enableLabels){const l=e(a),p=o/(t.length-1),O=Object(c["l"])(0,200,p),y=Object(c["l"])(20,6,p)/.75,g=Object(i["k"])(a.loadPriority)&&a.loadPriority>=t.length,f=new b["a"]([O,g?0:O,g?0:O]),w="3d"===this.view.type?()=>new h["a"]({verticalOffset:{screenLength:40/.75},callout:{type:"line",color:"white",border:{color:"black"}},symbolLayers:[new r["a"]({text:l,halo:{color:"white",size:1/.75},material:{color:f},size:y})]}):()=>new j["a"]({text:l,haloColor:"white",haloSize:1/.75,color:f,size:y});if(this._labels.has(n)){const e=this._labels.get(n),t=w();(Object(i["j"])(e.symbol)||JSON.stringify(t)!==JSON.stringify(e.symbol))&&(e.symbol=t)}else{const e=new u["a"]({geometry:d.extent.center,symbol:w()});this._labels.set(n,e),s.push(e)}}});const a=new Array;l.forEach(e=>{this._polygons.has(e)&&(a.push(this._polygons.get(e)),this._polygons.delete(e)),this._labels.has(e)&&(a.push(this._labels.get(e)),this._labels.delete(e))}),this.view.graphics.removeMany(a),this.view.graphics.addMany(s)}clear(){this.view.graphics.removeMany(Array.from(this._polygons.values())),this.view.graphics.removeMany(Array.from(this._labels.values())),this._polygons.clear(),this._labels.clear()}};Object(l["a"])([Object(a["b"])({constructOnly:!0})],O.prototype,"view",void 0),Object(l["a"])([Object(a["b"])({readOnly:!0})],O.prototype,"updating",void 0),Object(l["a"])([Object(a["b"])()],O.prototype,"enabled",null),O=Object(l["a"])([Object(o["a"])("esri.views.support.TileTreeDebugger")],O)}}]);